nonzero_cg.c/h のデータ構造についての説明
=========================================

初出: [azlib-devel:00497] [大規模]マトリックスのデータ構造１


------------------------------------------------------------------------------
竹内＠くいんとです．

大規模マトリックスについて議論を始めたいと思います．
＃青山君参加お願いします．

大規模マトリックス関連のプログラムとして，私は次のような仕様を挙げました．

>  大規模マトリックス関連のプログラムは，次のような仕様を満たす必要があります．
> 1. 100万節点級の剛性・質量マトリックスを扱えること．
> 2. メモリーに入りきらない場合を考慮して，外部記憶（ハードディスク）を補助的
>    に使用できること．
> 3. 64bit 化を視野に入れること．
> 4. 静的縮退処理が行えること．（出来れば直接法で連立一次方程式が解けること）
> 5. MPC, 剛体要素の処理が出来ること．
> 6. 局所座標系の処理が出来ること．
> 7. 反復法により連立一次方程式がとけること．

特に仕様の変更はありません．まずは，この仕様を満足するようにデータ構造から
考えてみようと思います．

参考のために，現在の nonzero_cg.c/h のデータ構造を解説しておきます．
nonzero_cg.c/h でのマトリックスの最小の記憶単位は，3x3 のマトリックスに
なっています．

typedef struct {
	int col;
	double v[3][3];
} NONZERO_ELEM3;

これは，一節点あたり３自由度のモデル，特に三次元弾性解析を強く意識しています．
そのようなモデルの全体剛性マトリックスは 3x3 の小マトリックスの集まりとして，
表現しても無駄が無いであろう，という考えに基づいています．シェル要素の場合は
一節点あたり６自由度必要になりますが，その場合は，3x3 の小マトリックスを2x2組
使って 6x6 のマトリックスを表現できますから問題ありません．

#流体解析等で，一節点あたり４自由度になる場合は，無駄を覚悟で 6x6 で使用する
#他ありませんが，そもそもマトリックスが非対称になったりしますので，CG 法の解法
#自体が異なりますので，過去に津幡君が汎用(1x1) の非対称ソルバーを別途開発して
#います．

さらに，この 3x3 の小行列を一行分の配列として管理します．

typedef struct {
	int size;
	NONZERO_ELEM3 *elem;
	int syn_size;
	int *syn;
} NONZERO_ROW3;

対称行列の場合，elem[size] は対角項（小行列）までを記憶します．対角項より後は，
インデックスだけを sym[syn_size] に記憶します．

さらに，これを節点数分（シェル要素の場合は節点数の二倍）だけ管理したものが
nonzero_cg.c/h におけるマトリックスのデータ構造です．

typedef struct {
	int size;
	NONZERO_ROW3 *row;
} NONZERO_MATRIX3;

ポイントは，やはり 3x3 の小行列を最小単位とすることです．
これによるメリットは，いくつかあります．

1. 探査の効率向上
　例えば，i 行目，j 列目の要素を探したり追加したりする処理は，探査すべき要素の
  数が全体で 1/9，各行でも 1/3 になりますから，本質的に高速になります．

2. 整数の記憶領域の削減
　1x1 で記憶する場合は，NONZERO_ELEM3 構造体の col に相当する添え字の記憶が
　非ゼロ項の数と同数必要になりますが，3x3 では 1/9 で済みます．

3. 小行列を前提とした前処理
　いわゆるブロック前処理が使えるので，CG 法の収束が微妙に早くなります．

4. 最内側ループを展開することによる計算時間の短縮
　mul_nonzero_matrix_vect3s() のソースコードを見てもらえば分かりますが，
　一番内側の for ループ(最も多く実行される部分）が適度に多くの演算が含まれて
　おり，CPU にとって効率良く実行できるようになっています．これにより，
　CG 法の１回の反復に要する計算時間が短縮されます．

デメリットは，１節点あたり１自由度や２自由度の場合（三次元解析でも特定の方向
だけ拘束された場合）には，記憶領域と計算回数に無駄が生じることです．しかし，
通常の使用では 1 〜 4 のメリットで十分相殺できると考えています．また，プログ
ラムも複雑になりますが，解析性能に直結する部分ですので効率を重視しています．

大規模マトリックスのデータ構造は，nonzero_cg.c/h とは大幅に異なると思いますが，
3x3 の小行列を最小単位とする考え方は継承するつもりです．

----
竹内 謙善
kenzen.takeuchi@jcom.home.ne.jp


