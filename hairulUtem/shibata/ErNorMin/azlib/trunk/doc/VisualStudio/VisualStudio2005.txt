VisualStudio 2005設定方法


 $Id: VisualStudio2005.txt 842 2006-12-04 06:21:20Z sasaoka $
-------------------------------------------------------------------------------

目次
 1. 始めに
 2. コンパイルまでの準備
    1. 新規ソリューションを立ち上げる
       1. 「ソリューション」?「プロジェクト」?
    2. プロジェクトを追加する
    3. ソースファイル，ヘッダーファイル，リソースファイルを追加
       1. 新規のファイルを追加する場合
       2. 既存のファイルを追加する場合
    4. コンパイル済みヘッダーを使用しないように設定
       1. 注意
    5. 追加のインクルードディレクトリを指定する
    6. 追加のライブラリディレクトリを指定する
    7. 追加の依存ファイルの指定
    8. プロジェクト依存関係の設定
 3. ビルド
    1. ライブラリファイルをビルド(リビルド)
 4. 実行 
    1. 注意



1. 始めに
=========
ここでは 「Lesson」 というソリューション(後述)に AzLib から「base, mathematics,
fem」のプロジェクトを追加し，実行ファイルになるメインのプログラムを含む「test」
というプロジェクトを追加 してビルド(コンパイル)するまでを記述する．



2. コンパイルまでの準備
=======================
 1. 新規ソリューションを立ち上げる
 ---------------------------------
   1. Microsoft Visual Studio .NET 2005を立ち上げる
   2. ファイル → 新規作成 → プロジェクト
      1. (左上)プロジェクトの種類 → Visual C++ → Win32
      2. (右上)テンプレート → Win32コンソールプロジェクト
      3. (下)プロジェクト名 : test
      4. (下)場所 → 適当な場所 → OK
      5. (下)ソリューション名 : Lesson → OK 
   3. Win32 アプリケーション ウィザード
      1. (左)追加のオプション → 空のプロジェクトにチェック → 完了 

  ************************************************************************
  「ソリューション」?「プロジェクト」?

  上記の「ソリューション」は，「プロジェクト」を複数抱えるより大きなフォルダ
  だと思えば良い．「プロジェクト」はライブラリ(*.lib, *.dll)や実行ファイル
  (*.exe)を作り出すためのファイルが集まったフォルダだと思えば良い．
  例えば，baseプロジェクトは AzLib における基盤ライブラリ「base.lib」を作る
  だけのプロジェクトである．
   * 例: ソリューション名 : Lesson,
         プロジェクト名   : base, mathematics, fem, test1, test2,... 

  通常「プロジェクト」毎にフォルダが作られ，そこにプログラム(*.c)やヘッダ
  (*.h)が配置される．
   * 例: azlib/trunk/src/{base,mathematics,fem},
         各自のメインプログラムのフォルダ 

  一つのソリューション内に base, mathematics, femの各プロジェクトは一つで
  よく， メインに相当するプロジェクトは複数あってかまわない． AzLibを使った
  test1.exe, test2.exe のようなプログラムを作るために複数のソリューションは
  必要ない．都合，base,mathematics,fem,test1,test2 の5つのプロジェクトを作る
  ことになる．
  ************************************************************************

  注意
  * 一旦配置した *.c, *.h, *.vcproj, *.sln などの元ファイルは移動してはなら
    ない．移動させた場合，再設定が必要になる．
  * 一度プロジェクトをビルドすると，オブジェクトファイル(*.obj) や スタティ
    ックライブラリ(*.lib) 以外にも azlib/trunk/projects/visual8/ 以下に
    *.vcproj 以外のファイルやフォルダが作成されるが，これは消して構わない．


 2. プロジェクトを追加する
 -------------------------
  1. ソリューションエクスプローラウィンドウ → ソリューション Lesson を
     右クリック
  2. 追加 → 既存のプロジェクト 
    * \Subversion\azlib\trunk\projects\visualc8\base.vcproj
    * \Subversion\azlib\trunk\projects\visualc8\mathematics.vcproj
    * \Subversion\azlib\trunk\projects\visualc8\fem.vcproj
    * 以上を追加 

  注意
    visualc7 は VisualStudio 2003(2002も?)用，visualc6 は Visual C++ 6.0用
    である．

 3. ソースファイル，ヘッダーファイル，リソースファイルを追加
 -----------------------------------------------------------
 ソリューションエクスプローラ ウィンドウ内で作業する．
 表示されてない時は，
    * 表示 → ソリューションエクスプローラ 
 で標準設定なら右側に表示される．

  [新規のファイルを追加する場合]
   1. プロジェクト test → ソースファイル　を右クリック
   2. 追加 → 新しい項目の追加 
      * ソースファイル 
       1. テンプレートでC++ファイルを選択
       2. 適当な名前(デフォルトは.cpp，.cにもできる) 
      * ヘッダーファイル 
       1. テンプレートでヘッダーファイルを選択
       2. 適当な名前 
      * リソースファイル 
       1. テンプレートで適当なものを選択
       2. 適当な名前 
  [既存のファイルを追加する場合]
    * ソースファイル 
      1. プロジェクト test → ソースファイル　を右クリック
      2. 追加 → 既存項目の追加
      3. 既存のソースファイルを選択 
    * ヘッダーファイル 
      1. プロジェクト test → ヘッダーファイル　を右クリック
      2. 追加 → 既存項目の追加
      3. 既存のヘッダーファイルを選択 
    * リソースファイル 
      1. プロジェクト test → リソースファイル　を右クリック
      2. 追加 → 既存項目の追加
      3. 既存のリソースファイルを選択 

 4. コンパイル済みヘッダーを使用しないように設定
 -----------------------------------------------
  1. プロジェクト test を右クリック → プロパティ
  2. 構成プロパティ → C/C++ → プリコンパイル済みヘッダー
  3. プリコンパイル済みヘッダーの作成/使用 → プリコンパイル済みプロセッサを
     使用しない → OK 

  注意 : このメニューは一度ビルドしないと出てこない．


 5. 追加のインクルードディレクトリを指定する
 -------------------------------------------
 ソリューションエクスプローラ ウィンドウ内で作業
  1. プロジェクト test を右クリック
  2. プロパティ → test プロパティページウィンドウ
  3. 構成プロパティ → C/C++ → 全般 → (右)追加のインクルードディレクトリ
     1. \Subversion\azlib\trunk\src\base
     2. \Subversion\azlib\trunk\src\mathematics
     3. \Subversion\azlib\trunk\src\fem 
  4. 以上を追加して → OK 

  <余談>
   これと同じ事をbase, mathematics, femプロジェクトでも既に行っている． 


 6. 追加のライブラリディレクトリを指定する
 -----------------------------------------
  1. プロジェクト test を右クリック → プロパティ
  2. 構成プロパティ → リンカ → 全般 → 追加のライブラリ ディレクトリ 
    * \Subversion\azlib\trunk\projects\visualc8
  3 以上を追加 → OK 


 7. 追加の依存ファイルの指定
 ---------------------------
  1. プロジェクト test を右クリック → プロパティ
  2. 構成プロパティ → リンカ → 入力 → 追加の依存ファイル 
    * base.lib fem.lib mathematics.lib
  3. 以上を追加(記入) → OK 

 8. プロジェクト依存関係の設定
 -----------------------------
  1. ソリューションエクスプローラウィンドウ → ソリューション Lesson を
     右クリック
  2. プロジェクト依存関係 
   ライブラリの依存関係は base → mathematics → fem → test の順で依存している
   と考えてよい．しかし，ビルドする順番は関係ない(リンクする時は関係ある)ので
    * base        : なし
    * mathematics : なし
    * fem         : なし
    * test        : base, mathematics, fem
   以上のようにチェックを入れて → OK 



3. ビルド
==========
以下のいずれかの方法でビルドすればよい．

 * base → mathematics → fem → test の順でビルドする．
 * test をビルド
 * Lesson をビルド 

2回目以降はリビルドを行う．また，挙動があやしい時はソリューションを
「クリーン」しておいて，ビルドをやり直す．

 <余談>
 経験論だが，「VisualStudioはコンパイル結果や設定をキャッシュしている」と思わ
 れる節がある．つまり，以前にコンパイルしたオブジェクトファイルを保持しており，
 リビルドした際にファイルが更新されてなければ，それを持ち出して ""コンパイル
 したこと"" にしている可能性がある． UNIXでは同様の事を行う
   * ccahce   (http://ccache.samba.org/)
   * cachecc1 (http://cachecc1.sourceforge.net/)
 というソフトもある(ビルドを繰り返す時は，高速にビルドできるので非常に有益で
 ある)．しかし，この機構は，ソースにやコンパイルオプションに何らかの変更が加
 えられた異なるオブジェクトファイルを同一視する可能性を秘めており，どう見ても
 間違ってないのにコンパイルエラーを繰り返すという謎の現象を引き起こす．
  よって，「クリーンが効いていない時もある」ということを念頭においておく．
 その場合，OSごと再起動すれば直る．



4. 実行
=======

デバッグ → デバッグ無しで実行

引数がある場合，コマンドプロンプトから実行する．


 <余談>
  VisualStudio 2003までは，一般ユーザー(制限付きユーザー)権限で Login して
  いる場合に 「デバッグ」の項目がいくつか実行できないという制限があった．
  デバッグ可能であるということは，システムのセキュリティ上問題がある情報
  (パスワード等)を ダンプ可能であることや，システムのライブラリにデバッグ用
  の変更を加えられる権限がある事を意味し，通常は許可しないためである．
   そのため，制限付きユーザーを開発環境で使うためには「Debugger Users」に
  追加する必要がある．
   コントロールパネル → パフォーマンスとメンテナンス → 管理ツール
   → コンピュータの管理 → ローカルユーザーとグループ → グループ
   → Debugger Users
  で制限付きユーザーをここに加えればデバッグを行うことができる．
   しかし，この設定でも2003ではまだ問題があり，2005では改善されたものの今だ
  細かい問題があるようである． そのため，VisualStudio を使ってプログラムを
  書く人は管理者権限で Login していることが多い．

 参考
   * 「取りあえず管理者アカウントで」という思考停止はもうやめよう
     <http://www.atmarkit.co.jp/fsecurity/column/ueno/41.html> (@IT, 8/30)
   * 本当に非管理者アカウントでは生きていけないんです
     <http://d.hatena.ne.jp/sen-u/20060831/p1> (うさぎ文学日記, 8/31) 

